name: ps-printer-app
base: core22
version: '3.22.10-1'
grade: 'stable'
summary: PostScript Printer Application
description: |
  The PostScript Printer Application is a PAPPL (Printer Application Framework) based Printer Application
  to support PostScript printers.
  PAPPL is a simple C-based framework/library for developing
  Printer Applications, which are the recommended replacement for
  printer drivers.

confinement: strict

# We use the upstream versioning of foomatic-db as it contains most of
# the manufacturer-supplied PostScript PPD files
adopt-info: hplip

# Only build on the architectures supported
architectures:
  - build-on: amd64
  - build-on: arm64
  - build-on: armhf

apps:
  ps-printer-app-server:
    command: scripts/run-ps-printer-app-server
    daemon: simple
    # Use a systemd timeout longer than 1 min as PAPPL has a 1-minute
    # shutdown timeout if there are pending jobs for which the printer
    # is not responding. This way we avoid the Printer Application
    # getting killed and shut down uncleanly.
    stop-timeout: 70s
    plugs: [avahi-control, home, network, network-bind, raw-usb]
  ps-printer-app:
    command: scripts/run-ps-printer-app
    plugs: [avahi-control, home, network, network-bind, raw-usb]

parts:
  hplip:
    # We use the Debian package source instead of the upstream source code
    # of HPLIP as the Debian package has ~80 patches fixing bugs which are
    # reported upstream but the patches not adopted upstream.
    # This way we should have the same user experience in terms of reliability
    # and quality as with the Debian package.
    # Note that the repository has all patches already applied, so we do
    # not need to apply them before building.
    # Debian source
    source: https://salsa.debian.org/printing-team/hplip.v2.git
    source-type: git
    source-tag: 'debian/3.22.10+dfsg0-4'
    source-depth: 1 
# ext:updatesnap
#   version-format:
#     format: 'debian/%V'
    # Upstream source
    #source: https://sourceforge.net/projects/hplip/files/hplip/3.22.10/hplip-3.22.10.tar.gz
    plugin: autotools
    build-environment:
      - PYTHON: python3
      - LD_LIBRARY_PATH: $CRAFT_STAGE/usr/lib${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}
      - CUPS_DATADIR: $CRAFT_STAGE/usr/share/cups
      - PPDC_DATADIR: $CRAFT_STAGE/usr/share/ppdc
      # Disable ImageProcesssor (for Debian source)
      - IMAGEPROC: disable
      # ImageProcessor oly on amd64 (for upstream source)
      #- on amd64:
      #  - IMAGEPROC: enable
      #- else:
      #  - IMAGEPROC: disable
      - on arm64:
        - BUILDARCH: aarch64-unknown-linux-gnu
      - else:
        - BUILDARCH: $CRAFT_ARCH_TRIPLET
    # Paremeter list here only needed for upstream source, but no need to
    # comment out for Debian source
    autotools-configure-parameters:
      - --build=$BUILDARCH
      - --prefix=/usr
      - --disable-foomatic-rip-hplip-install
      - --without-docdir
      - --without-htmldir
      - --with-hpppddir=/usr/share/ppd/hplip/HP
      - --without-drvdir
      - --without-icondir
      - --enable-hpcups-install
      - --disable-cups-drv-install
      - --enable-cups-ppd-install
      - --disable-hpijs-install
      - --disable-foomatic-drv-install
      - --disable-foomatic-ppd-install
      - --$IMAGEPROC-imageProcessor-build
      - --enable-network-build
      - --disable-class-driver
      - --disable-scan-build
      - --disable-gui-build
      - --disable-fax-build
      - --disable-qt3
      - --disable-qt4
      - --disable-qt5
      - --disable-policykit
    override-pull: |
      set -eux
      # Do the actual pull task
      craftctl default
      # Settings:
      # Force channel: auto/devel/edge/stable
      CHANNEL=stable
      # Force package release number (integer) or "auto"
      PACKAGERELEASE=auto
      # Time stamp of Snap build in Snap Store
      snapbuilddatehuman=`curl -s -H 'Snap-Device-Series: 16' https://api.snapcraft.io/v2/snaps/info/hplip-printer-app | jq -r '."channel-map" | .[] | select(.channel.name == "edge") | select(.channel.architecture == "amd64") | ."created-at"'`
      snapbuilddate=`date +%s --date=$snapbuilddatehuman`
      if [ -z "$snapbuilddate" ]; then
          snapbuilddate=0
      fi
      # Time stamp of the last GIT commit of the snapping repository
      pushd $CRAFT_PROJECT_DIR
      gitcommitdate=`git log -1 --date=unix | grep Date: | perl -p -e 's/Date:\s*//'`
      popd
      if [ -z "$gitcommitdate" ]; then
          gitcommitdate=0
      fi
      # Previous stable and development version
      prevstable="$(curl -s -H 'Snap-Device-Series: 16' https://api.snapcraft.io/v2/snaps/info/hplip-printer-app | jq -r '."channel-map" | .[] | select(.channel.name == "stable") | select(.channel.architecture == "'$CRAFT_TARGET_ARCH'") | .version')"
      if [ -z "$prevstable" ]; then
          prevstable=0
      fi
      prevdevel="$(curl -s -H 'Snap-Device-Series: 16' https://api.snapcraft.io/v2/snaps/info/hplip-printer-app | jq -r '."channel-map" | .[] | select(.channel.name == "edge") | select(.channel.architecture == "'$CRAFT_TARGET_ARCH'") | .version')"
      if [ -z "$prevdevel" ]; then
          prevdevel=0
      fi
      # Previous version in general
      dpkg --compare-versions "$prevdevel" lt "$prevstable" && prevversion=$prevstable || prevversion=$prevdevel
      # Current upstream version of HPLIP
      upstreamversion="$(git describe --tags --always | sed -E 's/^v//;s/[+_].*//;y/-/./;s/^debian\///')"
      # Determine package release number
      if test "x$PACKAGERELEASE" = "xauto"; then
          packagerelease=`echo "$prevversion" | perl -p -e 's/^('"$upstreamversion"'\-(\d+)|.*)$/\2/'`
          if [ -z "$packagerelease" ]; then
              packagerelease=1
          else
              if test "$gitcommitdate" -gt "$snapbuilddate"; then
                  packagerelease=$(( $packagerelease + 1 ))
              fi
          fi
      else
          packagerelease=$PACKAGERELEASE
      fi
      # Compose version string
      version="$upstreamversion-$packagerelease"
      # Select channel
      if test "x$CHANNEL" = "xedge" -o "x$CHANNEL" = "xdevel"; then
          grade=devel
      elif test "x$CHANNEL" = "xstable"; then
          grade=stable
      else
          [ -n "$(echo $version | grep "+git")" ] && grade=devel || grade=stable
      fi
      # Set version and grade
      craftctl set version="$version"
      craftctl set grade="$grade"
    # We need the PostScript and hpcups PPDs, the hpps and hpcups filters,
    # the hp backend, and the hp-probe utility
    override-build: |
      set -eux
      # Correct hard-coded /etc/hp/ path in Makefile
      perl -p -i -e 's:/etc/hp:/snap/hplip-printer-app/current/etc/hp:' Makefile*
      # Remove hard-coded linking of binary-only libImageProcessor
      # in Makefile for non-amd64 architectures (for upstream source)
      #if echo $CRAFT_ARCH_TRIPLET | grep -qv x86_64; then
      #  perl -p -i -e 's: -lImageProcessor::' Makefile*
      #fi
      # Do the "./configure" (for Debian source)
      sh debian/autogen.sh
      ./configure \
        --build=$BUILDARCH \
        --prefix=/usr \
        --disable-foomatic-rip-hplip-install \
        --without-docdir \
        --without-htmldir \
        --with-hpppddir=/usr/share/ppd/hplip/HP \
        --without-drvdir \
        --without-icondir \
        --enable-hpcups-install \
        --disable-cups-drv-install \
        --enable-cups-ppd-install \
        --disable-hpijs-install \
        --disable-foomatic-drv-install \
        --disable-foomatic-ppd-install \
        --$IMAGEPROC-imageProcessor-build \
        --enable-network-build \
        --disable-class-driver \
        --disable-scan-build \
        --disable-gui-build \
        --disable-fax-build \
        --disable-qt3 \
        --disable-qt4 \
        --disable-qt5 \
        --disable-policykit
      # Following step needed because of the Debian patches (for Debian source)
      # Compress various files before building, they are needed for the build,
      # and were compressed in the non-repacked upstream tarballs
      find . -name '*.ppd' | xargs gzip -f
      find data/ -regextype posix-extended -regex '.*\.(ldl|pcl|ps|pdf)' | xargs gzip -f
      # Following step needed because of the Debian patches (for Debian source)
      # Rebuild the .drv.in files from drv.in.template
      python3 ./dat2drv.py
      # Correct hard-coded paths in C/C++ source code
      # The /etc/... and /usr/... paths in these files do not need to get
      # corrected, only the /var/... ones
      perl -p -i -e 's:\"/var/lib/hp:\"/var/snap/hplip-printer-app/common/var/:' common/utils.[ch]
      # Set path for dynamic link libraries of the proprietary plugin
      # We have to apply this patch here as patches on the C/C++ code need
      # to get applied before compiling
      patch -p0 < $CRAFT_PROJECT_DIR/snap/local/hplip-plugin-library-load-path.patch
      # Do the "./configure; make; make install" (for upstream source)
      # craftctl default
      # Do the "make; make install" (for Debian source)
      make
      make DESTDIR=$CRAFT_PART_INSTALL install
      # Correct hard-coded paths in hplip.conf
      ( cd $CRAFT_PART_INSTALL/snap/hplip-printer-app/current/etc/hp; \
        perl -p -i -e 's:/var/:/var/snap/hplip-printer-app/common/var/:' hplip.conf; \
        perl -p -i -e 's:/usr/share/:/snap/hplip-printer-app/current/usr/share/:' hplip.conf; \
        perl -p -i -e 's:/usr/share/ppd/hplip:/usr/share/ppd:' hplip.conf; \
        perl -p -i -e 's:/usr/share/ppd/HP:/usr/share/ppd:' hplip.conf; \
        perl -p -i -e 's:/usr/lib/cups/:/snap/hplip-printer-app/current/usr/lib/hplip-printer-app/:' hplip.conf; \
      )
      # Correct hard-coded /var and /etc paths in the utilities written in
      # Python
      ( cd $CRAFT_PART_INSTALL/usr/share/hplip/
        perl -p -i -e 's:/var/(\S+)/hp:/var/snap/hplip-printer-app/common/var/\1/hp:' *.py */*.py */*/*.py
        perl -p -i -e 's:/var/lib/hp:/var:' *.py */*.py */*/*.py
        perl -p -i -e 's:/etc/hp:/snap/hplip-printer-app/current/etc/hp:' *.py */*.py */*/*.py
        # Set path for firmware files of the proprietary plugin
        # We have to apply this patch here so that the global corrections done
        # right above do not mess it up
        patch -p0 < $CRAFT_PROJECT_DIR/snap/local/hplip-plugin-firmware-load-path.patch
      )
      # Correct Python shebang in the utilities
      ( cd $CRAFT_PART_INSTALL; \
        for file in usr/bin/hp-*; do \
          perl -p -i -e 's:^\s*\#\!\s*/usr/bin/env\s+python.*:#!/snap/hplip-printer-app/current/usr/bin/python3:' `readlink -f $file`; \
        done; \
      )
      # "make install" install Python extension modules to the wrong place
      # (for Debian source)
      rm $CRAFT_PART_INSTALL/usr/lib/python*/site-packages/*.la
      mkdir -p $CRAFT_PART_INSTALL/usr/lib/python3/dist-packages
      mv $CRAFT_PART_INSTALL/usr/lib/python*/site-packages/*.so $CRAFT_PART_INSTALL/usr/lib/python3/dist-packages
      # "make install" misses to install the PostScript PPD files, do it now
      # (for Debian source)
      cp prnt/ps/*.ppd.gz $CRAFT_PART_INSTALL/usr/share/ppd/hplip/HP/
      # Handle the PPD files: Unzip, remove "(recommended)" (we have only
      # HPLIP here, no other driver), compress into self-extracting archive
      ( cd $CRAFT_PART_INSTALL/usr/share/ppd/hplip/HP/; \
        find . -name '*.gz' | xargs gunzip -f; \
        for file in `find . -name '*.ppd'`; do \
          perl -p -i -e 's/(\*NickName:.*\S+)\s*\(recommended\)/\1/' $file; \
        done; \
        PYTHONPATH=$CRAFT_STAGE/lib/python3.10/site-packages $CRAFT_STAGE/bin/pyppd -v -o hplip-ppds .; \
        mv hplip-ppds ../..; \
        cd ../..; \
        rm -rf hplip; \
      )
      # Link Python 3 to the "python" executable name (no older Python in this
      # Snap and everything needs Python 3)
      ln -sf python3 $CRAFT_PART_INSTALL/usr/bin/python
      # Install the binary-only libImageProcessor only if we build the Snap for
      # amd64 (x86_64) (for upstream source)
      #if echo $CRAFT_ARCH_TRIPLET | grep -q x86_64; then
      #  cp prnt/hpcups/libImageProcessor-x86_64.so $CRAFT_PART_INSTALL/usr/lib/libImageProcessor.so
      #fi
      # Install the public key for verifying the signature of the proprietary
      # plugin (for Debian source)
      cp debian/upstream/signing-key.asc $CRAFT_PART_INSTALL/usr/share/hplip/
    build-packages:
      - ubuntu-dev-tools
      - dpkg-dev
      - fakeroot
      - automake
      - gawk
      - python3-dev
      - libpython3-dev
      - fdupes
      - libavahi-client-dev
      - libavahi-core-dev
      - libdbus-1-dev
      - libjpeg-dev
      - libsnmp-dev
      - libssl-dev
      - libtool
      - libudev-dev
      - libusb-1.0-0-dev
      - perl-base
      - python3
      - xz-utils
      - jq
      - curl
    stage-packages:
      - python3
      - python3-minimal
      - python3.10
      - python3.10-minimal
      - python3-dbus
      - python3-distro
      - python3-gi
      - python3-pexpect
      - python3-pil
      - python3-reportlab
      - libpython3.10
      - libpython3.10-stdlib
      - wget
      - xz-utils
      # We stage avahi-utils already in the "cups" part, to stage
      # everything Avahi-related there, to avoid any file clashes.
      #- avahi-utils
      - libsnmp40
      - libsnmp-base
    organize:
      usr/lib/cups/filter/hpcups: usr/lib/hplip-printer-app/filter/hpcups
      usr/lib/cups/filter/hpps: usr/lib/hplip-printer-app/filter/hpps
      usr/lib/cups/backend/hp: usr/lib/hplip-printer-app/backend/hp
      snap/hplip-printer-app/current/etc: etc
    prime:
      - etc/hp
      - -var
      - usr/bin
      - -usr/bin/pdb*
      - -usr/bin/py*versions
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/python*
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - usr/share/hplip
      - usr/share/ppd
      - usr/share/snmp
      - usr/lib/hplip-printer-app
      - -usr/lib/cups
      # Reported unused by snapcraft linter
      - -usr/lib/libhpip.*
      - -usr/lib/*/libavahi-core.*
      - -usr/lib/*/libgdbm.*
      - -usr/lib/*/libgdbm_compat.*
      - -usr/lib/*/libnetsnmpagent.*
      - -usr/lib/*/libnetsnmpmibs.*
      - -usr/lib/*/libpci*
      - -usr/lib/*/libsensors.*
      - -usr/lib/*/libsnmp.*
    after: [cups, pyppd]

  gutenprint:
    source: https://github.com/echiu64/gutenprint.git
    source-type: git
    source-tag: 'gutenprint-5_3_3'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: 'gutenprint-%M_%m_%R'
#     lower-than: '6'
#     no-9x-revisions: true
    plugin: autotools
    # We only need the library, the XML resources,  and the CUPS driver
    # (PPD generator, filter, backend)
    autotools-configure-parameters:
      - --prefix=/usr
      - --datarootdir=/snap/gutenprint-printer-app/current/usr/share
      - --enable-shared
      - --disable-rpath
      - --with-modules=static
      - --without-gimp2
      - --disable-libgutenprintui2
      - --with-cups
      - --enable-cups-level3-ppds
      - --enable-translated-cups-ppds
      - --enable-simplified-cups-ppds
      - --enable-cups-1_2-enhancements
      - --disable-cups-ppds
      - --enable-escputil
      - --disable-samples
      - --disable-test
      - --disable-testpattern
      - --enable-nls
      - --without-doc
    override-pull: |
      set -eux
      # Do the actual pull task
      craftctl default
      # Settings:
      # Force channel: auto/devel/edge/stable
      CHANNEL=stable
      # Force package release number (integer) or "auto"
      PACKAGERELEASE=auto
      # Time stamp of Snap build in Snap Store
      snapbuilddatehuman=`curl -s -H 'Snap-Device-Series: 16' https://api.snapcraft.io/v2/snaps/info/gutenprint-printer-app | jq -r '."channel-map" | .[] | select(.channel.name == "edge") | select(.channel.architecture == "amd64") | ."created-at"'`
      snapbuilddate=`date +%s --date=$snapbuilddatehuman`
      if [ -z "$snapbuilddate" ]; then
          snapbuilddate=0
      fi
      # Time stamp of the last GIT commit of the snapping repository
      pushd $CRAFT_PROJECT_DIR
      gitcommitdate=`git log -1 --date=unix | grep Date: | perl -p -e 's/Date:\s*//'`
      popd
      if [ -z "$gitcommitdate" ]; then
          gitcommitdate=0
      fi
      # Previous stable and development version
      prevstable="$(curl -s -H 'Snap-Device-Series: 16' https://api.snapcraft.io/v2/snaps/info/gutenprint-printer-app | jq -r '."channel-map" | .[] | select(.channel.name == "stable") | select(.channel.architecture == "'$CRAFT_TARGET_ARCH'") | .version')"
      if [ -z "$prevstable" ]; then
          prevstable=0
      fi
      prevdevel="$(curl -s -H 'Snap-Device-Series: 16' https://api.snapcraft.io/v2/snaps/info/gutenprint-printer-app | jq -r '."channel-map" | .[] | select(.channel.name == "edge") | select(.channel.architecture == "'$CRAFT_TARGET_ARCH'") | .version')"
      if [ -z "$prevdevel" ]; then
          prevdevel=0
      fi
      # Previous version in general
      dpkg --compare-versions "$prevdevel" lt "$prevstable" && prevversion=$prevstable || prevversion=$prevdevel
      # Current upstream version of gutenprint
      upstreamversion="$(git describe --tags --always | sed -E 's/^gutenprint-([0-9]+_[0-9]+_[0-9]+).*$/\1/; s/_/\./g')"
      # Determine package release number
      if test "x$PACKAGERELEASE" = "xauto"; then
          packagerelease=`echo "$prevversion" | perl -p -e 's/^('"$upstreamversion"'\-(\d+)|.*)$/\2/'`
          if [ -z "$packagerelease" ]; then
              packagerelease=1
          else
              if test "$gitcommitdate" -gt "$snapbuilddate"; then
                  packagerelease=$(( $packagerelease + 1 ))
              fi
          fi
      else
          packagerelease=$PACKAGERELEASE
      fi
      # Compose version string
      version="$upstreamversion-$packagerelease"
      # Select channel
      if test "x$CHANNEL" = "xedge" -o "x$CHANNEL" = "xdevel"; then
          grade=devel
      elif test "x$CHANNEL" = "xstable"; then
          grade=stable
      else
          [ -n "$(echo $version | grep "+git")" ] && grade=devel || grade=stable
      fi
      # Set version and grade
      craftctl set version="$version"
      craftctl set grade="$grade"
    build-packages:
      - byacc
      - libreadline-dev
      - libusb-1.0-0-dev
      - zlib1g-dev
      - flex
      - gettext
      - chrpath
      - libtool-bin
      - jq
      - curl
    organize:
      snap/gutenprint-printer-app/current/usr/share: usr/share
      usr/lib/cups/filter/rastertogutenprint.5.3: usr/lib/gutenprint-printer-app/filter/rastertogutenprint.5.3
      usr/lib/cups/filter/commandtoepson: usr/lib/gutenprint-printer-app/filter/commandtoepson
      usr/lib/cups/filter/commandtocanon: usr/lib/gutenprint-printer-app/filter/commandtocanon
      usr/lib/cups/backend/gutenprint53+usb: usr/lib/gutenprint-printer-app/backend/gutenprint53+usb
      usr/share/cups/usb/net.sf.gimp-print.usb-quirks: usr/lib/gutenprint-printer-app/backend/net.sf.gimp-print.usb-quirks
      usr/lib/cups/driver/gutenprint.5.3: usr/share/ppd/gutenprint.5.3
    prime:
      - usr/bin/cups-calibrate
      - usr/bin/escputil
      - usr/sbin/*genppd*
      - usr/lib/lib*.so*
      - usr/lib/gutenprint-printer-app
      - usr/share/ppd/gutenprint.5.3
      - usr/share/gutenprint
      - usr/share/locale
      - usr/share/cups/calibrate.ppm
      - -snap
      - -etc/fonts
      - -var
      - -usr/include
      - -share/man
      - -share/doc
      - -share/lintian
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -usr/share/gutenprint/doc
      - -usr/lib/gutenprint
      - -usr/lib/libgutenprint.a
      - -usr/lib/libgutenprint.la
      - -usr/lib/pkgconfig
      - -usr/lib/cups
    after: [cups]

  pappl:
    source: https://github.com/michaelrsweet/pappl
    source-type: git
    source-tag: 'v1.4.5'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     lower-than: '2'
#     no-9x-revisions: true
    plugin: autotools
    override-build: |
      set -eux
      # Raise the supported number of vendor-specific options/attributes in
      # PAPPL to 256, as the original 32 can be too small for some busy PPD
      # files
      perl -p -i -e 's/(define\s+PAPPL_MAX_VENDOR\s+)32/\1 256/' pappl/printer.h
      # De-activate log-rotating. It does not work with the forked processes
      # of the filters
      perl -p -i -e 's/(system->logmaxsize\s+=).*/\1 0;/' pappl/system.c
      # As we do not use PAPPL's own backends but the CUPS backends using the
      # "cups" device scheme of pappl-retrofit, we let the manual "Network
      # Printer" device on the "Add Printer" page of the web interface use a
      # "cups:socket://..." URI instead of simply "socket://..."
      perl -p -i -e 's/(httpAssembleURI\(.*?)"socket"(.*?\))/\1"cups:socket"\2/' pappl/system-webif.c
      # PAPPL's build system does not insert the LDFLAGS when linking.
      # Patching Makedefs.in to fix this
      perl -p -i -e 's/^(\s*DSOFLAGS\s*=\s*\S*\s+)/\1\$\(LDFLAGS\) /' Makedefs.in
      craftctl default
    autotools-configure-parameters:
      - --prefix=/usr
      - --with-papplstatedir=/var/snap/ps-printer-app/common
      - --with-papplsockdir=/var/snap/ps-printer-app/common/tmp
      - --enable-libjpeg
      - --enable-libpng
      - --enable-libusb
      - --with-dnssd=avahi
    build-packages:
      - libavahi-client-dev
      - libgnutls28-dev
      - libjpeg-dev
      - libpam0g-dev
      - libpng-dev
      - libusb-1.0-0-dev
      - zlib1g-dev
      - perl-base
    stage-packages:
      # We have libavahi-client3 already in this Snap via the "cups" part,
      # so here we do not stage it again to avoid any file clashes.
      #- libavahi-client3
      - libpng16-16
      - libusb-1.0-0
    prime:
      - -etc/fonts
      - -var
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    after: [cups]

  pappl-retrofit:
    source: https://github.com/openprinting/pappl-retrofit
    source-type: git
    source-tag: '1.0b2'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: '%V'
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    build-packages:
      - autoconf
      - automake
      - libtool
      - autotools-dev
      - pkg-config
      - perl-base
    stage-packages:
      - libusb-1.0-0
    organize:
      usr/share/legacy-printer-app/testpage.pdf: usr/share/ps-printer-app/testpage.pdf
    prime:
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ps-printer-app/testpage.pdf
      - -var
      - -usr/bin/legacy-printer-app
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/lib/legacy-printer-app
      - -usr/share/legacy-printer-app
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    after: [cups, pappl, libcupsfilters, libppd]

  qpdf:
    source: https://github.com/qpdf/qpdf/
    source-type: git
    source-tag: 'v11.8.0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     lower-than: '12'
#     no-9x-revisions: true
    plugin: cmake
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=/
      - -DCMAKE_BUILD_RPATH_USE_ORIGIN=1
      - -DUSE_IMPLICIT_CRYPTO=0
      - -DREQUIRE_CRYPTO_GNUTLS=1
      - -DSHOW_FAILED_TEST_OUTPUT=1
      - -DCMAKE_BUILD_TYPE=RelWithDebInfo
      - -DQTEST_COLOR=0
    build-packages:
      - cmake
      - g++
      - libjpeg-dev
      - zlib1g-dev
      - libgnutls28-dev
    stage-packages:
      - libjpeg-turbo8
    stage:
      # The *.la file which gets installed by "make install" contains a
      # wrong prefix, breaking parts of this Snap which use this library
      - -usr/lib/lib*.la
    prime:
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - -etc/fonts
      - -var
      - -usr/include
      - -share/man
      - -share/doc
      - -share/lintian
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -usr/lib/libqpdf.a
      - -usr/lib/libqpdf.la
      - -usr/lib/pkgconfig

  ghostscript:
    #source: https://git.ghostscript.com/ghostpdl.git
    source: https://github.com/ArtifexSoftware/ghostpdl.git
    source-type: git
    source-tag: 'ghostpdl-10.02.1'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: "ghostpdl-%M.%m.%R"
#     lower-than: '11'
#     no-9x-revisions: true
    plugin: autotools
    # We only need PostScript output, for converting PDF input
    autotools-configure-parameters:
      - --prefix=/usr
      - --without-x
      - --disable-gtk
      - --with-drivers=ps2write
      - --enable-freetype
      - --without-tesseract
      - --without-gpdl
      - --without-pcl
      - --without-xps
      - --datarootdir=/snap/ps-printer-app/current/usr/share/
    stage-packages:
      - libpaper1
      - libfontconfig1
      - libfreetype6
      - libpng16-16
    prime:
      - usr/bin/gs
      - lib/*/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ghostscript
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - -snap
    organize:
      snap/ps-printer-app/current/usr/share: usr/share
    after: [cups]

  cups:
    source: https://github.com/OpenPrinting/cups
    source-type: git
    source-tag: 'v2.4.7'
    source-depth: 1
# ext:updatesnap
#   version-format: 
#     lower-than: '3'
#     no-9x-revisions: true
    plugin: autotools
    # We only need libcups (with headers, ...) and the backends
    override-build: |
      set -eux
      patch -p1 < $CRAFT_PROJECT_DIR/snap/local/cups-dnssd-backend-socket-only.patch
      # We use "--with-tls=gnutls" here, as current CUPS defaults to SSL here
      # and this is buggy, causing a segfault when serving out a HTTPS web
      # interface page.
      ./configure --sysconfdir=/var/snap/ps-printer-app/common/ --with-tls=gnutls
      cd cups
      make
      cd ..
      cd backend
      # Have USB quirk files in user-modifiable space for debugging
      perl -p -i -e 's/"CUPS_DATADIR"/"USB_QUIRK_DIR"/' usb-libusb.c
      make snmp dnssd socket ipp ipps lpd usb
      cd ..
      mkdir -p $CRAFT_PART_INSTALL/usr/lib
      cp cups/libcups.a $CRAFT_PART_INSTALL/usr/lib/
      cp -P cups/libcups.so* $CRAFT_PART_INSTALL/usr/lib/
      mkdir -p $CRAFT_PART_INSTALL/usr/include/cups
      cp cups/*.h $CRAFT_PART_INSTALL/usr/include/cups/
      mkdir -p $CRAFT_PART_INSTALL/usr/bin
      cp cups-config $CRAFT_PART_INSTALL/usr/bin/
      mkdir -p $CRAFT_PART_INSTALL/usr/lib/ps-printer-app/backend/
      ( cd backend; \
        cp snmp dnssd socket ipp ipps lpd usb org.cups.usb-quirks $CRAFT_PART_INSTALL/usr/lib/ps-printer-app/backend/ \
      )
      cp conf/snmp.conf $CRAFT_PART_INSTALL/usr/lib/ps-printer-app/backend/
      #craftctl default
    build-packages:
      - patch
      - gettext
      - autoconf
      - automake
      - libtool
      - autotools-dev
      - pkg-config
      - libavahi-client-dev
      - libavahi-common-dev
      - libavahi-compat-libdnssd-dev
      - libdbus-1-dev
      - libfontconfig1-dev
      - libfreetype6-dev
      - libgnutls28-dev
      - libjpeg-dev
      - libldap2-dev
      - libkrb5-dev
      - libpam0g-dev
      - libpaper-dev
      - libpng-dev
      - libusb-1.0-0-dev
      - perl-base
    stage-packages:
      - libusb-1.0-0
      - libavahi-common3
      - libavahi-client3
      - libicu70
    prime:
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/ps-printer-app/backend/*
     # Reported unused by snapcraft linter
      - -usr/lib/*/libdconf.*
      - -usr/lib/*/libicuio.*
      - -usr/lib/*/libicutest.*
      - -usr/lib/*/libicutu.*
      - -usr/lib/*/libicuuc.*
      - -usr/lib/*/libicui18n.*

  libcupsfilters:
    source: https://github.com/OpenPrinting/libcupsfilters
    source-type: git
    source-tag: '2.0.0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     lower-than: '3'
#     no-9x-revisions: true
    plugin: autotools
    # We only need libcupsfilters itself. so we simply do not prime the
    # auxiliary files (/usr/share)
    autotools-configure-parameters:
      - --prefix=/usr
      - --disable-avahi
      - --disable-mutool
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
      - liblcms2-dev
      - libpoppler-cpp-dev
      - libpng-dev
      - libjpeg-dev
      - libtiff5-dev
      - zlib1g-dev
      - libfontconfig1-dev
      - libdbus-1-dev
      - libexif-dev
    stage-packages:
      - libpoppler-cpp0v5
      - libjbig0
      - liblcms2-2
      - libnspr4
      - libnss3
      - libopenjp2-7
      - libpoppler118
      - libtiff5
      - libwebp7
      - libexif12
    stage:
      # The *.la file which gets installed by "make install" contains a
      # wrong prefix, breaking parts of this Snap which use this library
      - -usr/lib/lib*.la
    prime:
      - -etc
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
       - usr/share/cups
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/*/nss
      # Reported unused by snapcraft linter
      - -usr/lib/*/libssl3.*
    after: [cups, qpdf, ghostscript]

  libppd:
    source: https://github.com/OpenPrinting/libppd
    source-type: git
    source-tag: '2.0.0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     lower-than: '3'
#     no-9x-revisions: true
    plugin: autotools
    # We only need libppd itself, so we also do not prime the auxiliary files
    # here.
    autotools-configure-parameters:
      - --prefix=/usr
      - --disable-mutool
      - --disable-pdftocairo
      - --disable-acroread
      - --with-pdftops-path=/snap/ps-printer-app/current/usr/bin/pdftops
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
      - poppler-utils
    prime:
      - -etc
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/ppdc
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/*/nss
    after: [cups, ghostscript, libcupsfilters]

  cups-filters:
    source: https://github.com/OpenPrinting/cups-filters
    source-type: git
    source-tag: '2.0.0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     lower-than: '3'
#     no-9x-revisions: true
    plugin: autotools
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    # We only need pdftops and foomatic-rip (for PIN-protected printing
    # on Ricoh and OEM)
    override-build: |
      set -eux
      ./autogen.sh
      ./configure --disable-mutool
      make foomatic-rip
      make pdftops
      mkdir -p $CRAFT_PART_INSTALL
      cp foomatic-rip $CRAFT_PART_INSTALL
      cp pdftops $CRAFT_PART_INSTALL
      #craftctl default
    build-packages:
      - gettext
      - autoconf
      - automake
      - autotools-dev
      - pkg-config
      - g++
      - sharutils
    stage-packages:
      - poppler-utils
    organize:
      foomatic-rip: usr/lib/ps-printer-app/filter/foomatic-rip
      pdftops: usr/lib/ps-printer-app/filter/pdftops
    prime:
      - -etc/fonts
      - -var
      - -usr/include
      - -usr/lib/pkgconfig
      - -usr/share/fonts
      - -usr/share/man
      - -usr/share/doc
      - -usr/share/doc-base
      - -usr/share/lintian
      - lib/*/lib*.so*
      - usr/lib/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/lib/*/nss
      - usr/bin/pdftops
      - usr/lib/ps-printer-app
      # Reported unused by snapcraft linter
      - -usr/lib/*/libcairo.*
      - -usr/lib/*/libssl3.*
      - -usr/lib/*/libX11.*
      - -usr/lib/*/libXau.*
      - -usr/lib/*/libXdmcp.*
      - -usr/lib/*/libXext.*
      - -usr/lib/*/libXrender.*
      - -usr/lib/*/libpixman-1.*
      - -usr/lib/*/libxcb.*
      - -usr/lib/*/libxcb-render.*
      - -usr/lib/*/libxcb-shm.*
    after: [cups, ghostscript, libcupsfilters, libppd]

  pyppd:
    source: https://github.com/OpenPrinting/pyppd
    source-type: git
    source-tag: 'release-1-1-0'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: "release-%M-%m-%R"
#     lower-than: '2'
#     no-9x-revisions: true
    plugin: python
    override-prime: ""

  foomatic-db:
    source: https://github.com/OpenPrinting/foomatic-db
    source-type: git
    source-tag: '20240109'
    source-depth: 1
# ext:updatesnap
#   version-format:
#     format: '%V'
    plugin: nil
    override-pull: |
      set -eux
      # Do the actual pull task
      craftctl default
      # Settings:
      # Force channel: auto/devel/edge/stable
      CHANNEL=stable
      # Force package release number (integer) or "auto"
      PACKAGERELEASE=auto
      # As foomatic-db is simply a collection of printer data and not
      # some software which is under continuous development and
      # milestones of the development turn into releases, it is simply
      # versioned by the date (a cron job on OpenPrinting "releases"
      # it every day.
      #
      # As we want to download it from GIT and not grab a daily
      # tarball for sake of Snap automation we simply take the date of
      # the day after the day of the execution of the pull task of
      # this part as the version number (this is the version in which
      # the current GIT state would land).
      # Time stamp of Snap build in Snap Store
      snapbuilddatehuman=`curl -s -H 'Snap-Device-Series: 16' https://api.snapcraft.io/v2/snaps/info/ps-printer-app | jq -r '."channel-map" | .[] | select(.channel.name == "edge") | select(.channel.architecture == "amd64") | ."created-at"'`
      snapbuilddate=`date +%s --date=$snapbuilddatehuman`
      if [ -z "$snapbuilddate" ]; then
          snapbuilddate=0
      fi
      # Time stamp of the last GIT commit of the snapping repository
      pushd $CRAFT_PROJECT_DIR
      gitcommitdate=`git log -1 --date=unix | grep Date: | perl -p -e 's/Date:\s*//'`
      popd
      if [ -z "$gitcommitdate" ]; then
          gitcommitdate=0
      fi
      # Previous stable and development version
      prevstable="$(curl -s -H 'Snap-Device-Series: 16' https://api.snapcraft.io/v2/snaps/info/ps-printer-app | jq -r '."channel-map" | .[] | select(.channel.name == "stable") | select(.channel.architecture == "'$CRAFT_TARGET_ARCH'") | .version')"
      if [ -z "$prevstable" ]; then
          prevstable=0
      fi
      prevdevel="$(curl -s -H 'Snap-Device-Series: 16' https://api.snapcraft.io/v2/snaps/info/ps-printer-app | jq -r '."channel-map" | .[] | select(.channel.name == "edge") | select(.channel.architecture == "'$CRAFT_TARGET_ARCH'") | .version')"
      if [ -z "$prevdevel" ]; then
          prevdevel=0
      fi
      # Previous version in general
      dpkg --compare-versions "$prevdevel" lt "$prevstable" && prevversion=$prevstable || prevversion=$prevdevel
      # Current upstream version of foomatic-db
      # Assuming release tags are in the format YYYYMMDD
      upstreamversion="$(git describe --tags --always | sed -e 's/^v//;s/-/+git/;s/\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\1\2\3/')"
      # Determine package release number
      if test "x$PACKAGERELEASE" = "xauto"; then
          packagerelease=`echo "$prevversion" | perl -p -e 's/^('"$upstreamversion"'\-(\d+)|.*)$/\2/'`
          if [ -z "$packagerelease" ]; then
              packagerelease=1
          else
              if test "$gitcommitdate" -gt "$snapbuilddate"; then
                  packagerelease=$(( $packagerelease + 1 ))
              fi
          fi
      else
          packagerelease=$PACKAGERELEASE
      fi
      # Compose version string
      version="$upstreamversion-$packagerelease"
      # Select channel
      if test "x$CHANNEL" = "xedge" -o "x$CHANNEL" = "xdevel"; then
          grade=devel
      elif test "x$CHANNEL" = "xstable"; then
          grade=stable
      else
          [ -n "$(echo $version | grep "+git")" ] && grade=devel || grade=stable
      fi
      # Set version and grade
      craftctl set version="$version"
      craftctl set grade="$grade"
    override-build: |
      set -eux
      # Remove non-PostScript manufacturer PPD files
      rm -rf db/source/PPD/*/PDF
      rm -rf db/source/PPD/*/PXL
      rm -rf db/source/PPD/*/PCL5
      # Remove executable bits from PPD files
      find db/source/PPD -executable -type f -print0 | xargs -0 chmod -x || :
      # Remove non-PPD files from PPD file directories
      find db/source/PPD -type f \! -name '*.ppd' -print0 | xargs -0 rm || :
      # Correct common errors in PPD files: "*CloseUI" without ':' and
      # "*1284DeviceId" instead of "*1284DeviceID"
      for f in `find db/source/PPD -name '*.ppd'`; do perl -p -i -e 's/^\*CloseUI(\s+)/*CloseUI:\1/' $f; perl -p -i -e 's/\*1284DeviceId/*1284DeviceID/' $f; done
      # Compress the PostScript PPDs in a self-extracting archive
      $CRAFT_STAGE/bin/pyppd -v -o $CRAFT_PART_INSTALL/foomatic-ps-ppds db/source/PPD
      craftctl default
    build-packages:
      - perl-base
      - python3
      - xz-utils
      - jq
    stage-packages:
      - python3
      - xz-utils
    organize:
      foomatic-ps-ppds: usr/share/ppd/foomatic-ps-ppds
    stage:
      - usr/bin
      - usr/share/ppd
    prime:
      - usr/bin/xz
      - -usr/bin/pdb3
      - -usr/bin/pydoc3
      - -usr/bin/pygettext3
      - usr/share/ppd
    after: [pyppd]

  hplip:
    # We need only the PostScript printer PPD files and the hpps
    # filter executable (for support for PIN-secured printing). We
    # clean up the PPDs from some common errors and as the hpps
    # executable is very simple, we do not run "./configure; make;
    # make install" but call gcc directly instead.
    #
    # We use the Debian package source instead of the upstream source code
    # of HPLIP as the Debian package has ~80 patches fixing bugs which are
    # reported upstream but the patches not adopted upstream.
    # This way we should have the same user experience in terms of reliability
    # and quality as with the Debian package.
    # Note that the repository has all patches already applied, so we do
    # not need to apply them before building.
    # Debian source
    source: https://salsa.debian.org/printing-team/hplip.v2.git
    source-type: git
    source-tag: 'debian/3.22.10+dfsg0-4'
    source-depth: 1 
    # Excluding hplip from the update automation process because the UpdateSnap script is
    # unable to retrieve the source-tag or source-branch for this repository.
# ext:updatesnap
#   version-format:
#     format: 'debian/%V'
    # Upstream source
    #source: https://sourceforge.net/projects/hplip/files/hplip/3.22.10/hplip-3.22.10.tar.gz
    plugin: nil
    override-build: |
      set -eux
      cd prnt/hpps
      touch config.h
      gcc -o hpps *.c -I. -I$CRAFT_STAGE/usr/include/ -L$CRAFT_STAGE/usr/lib/ -lcups
      rm config.h
      cd ../..
      mkdir -p $CRAFT_PART_INSTALL
      cp prnt/hpps/hpps $CRAFT_PART_INSTALL
      # Remove executable bits from PPD files
      find prnt/ps -executable -type f -print0 | xargs -0 chmod -x || :
      # Remove non-PPD files from PPD file directories
      find prnt/ps -type f \! -name '*.ppd*' -print0 | xargs -0 rm || :
      # Unzip the PPD files (for upstream source)
      # find prnt/ps -type f -name '*.ppd.gz' -print0 | xargs -0 gunzip || :
      # Correct common errors in PPD files: "*CloseUI" without ':' and
      # "*1284DeviceId" instead of "*1284DeviceID"
      for f in `find prnt/ps -name '*.ppd'`; do perl -p -i -e 's/^\*CloseUI(\s+)/*CloseUI:\1/' $f; perl -p -i -e 's/\*1284DeviceId/*1284DeviceID/' $f; done
      # Compress the PostScript PPDs in a self-extracting archive
      $CRAFT_STAGE/bin/pyppd -v -o $CRAFT_PART_INSTALL/hplip-ps-ppds prnt/ps
      craftctl default
    build-packages:
      - perl-base
      - python3
      - xz-utils
    stage-packages:
      - python3
      - xz-utils
    organize:
      hplip-ps-ppds: usr/share/ppd/hplip-ps-ppds
      hpps: usr/lib/ps-printer-app/filter/hpps
    stage:
      - usr/bin
      - usr/share/ppd
      - usr/lib/ps-printer-app
    prime:
      - usr/bin/xz
      - -usr/bin/pdb3
      - -usr/bin/pydoc3
      - -usr/bin/pygettext3
      - usr/share/ppd
      - usr/lib/ps-printer-app
    after: [cups, pyppd]

  ps-printer-app:
    plugin: make
    source: .
    make-parameters:
      - LDFLAGS="$LDFLAGS -ljpeg"
      - VERSION="$VERSION"
    # To find the libraries built in this Snap
    build-environment:
      - LD_LIBRARY_PATH: "${LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:}$CRAFT_STAGE/usr/lib"
    # To improve convenience for developers (and everyone who wants to
    # build from source), we do a "make clean" before "make" here,
    # because if we had done "make" off-Snap, directly in the source
    # tree and afterwards build the Snap with snapcraft, the build
    # sucks in our local binary of ps-printer-app instead of
    # compiling its own one in the Snap harness with the appropriate
    # libraries, ending up with the Snap containing an executable
    # which does not work inside the Snap. The "make clean" removes
    # any accidentally grabbed binary.
    #
    # We need to directly call the "make" and "make install" commands
    # here as we cannot inject an environment variable into the default
    # build process ("craftctl default") and we also cannot call
    # "craftctl get version" in the lines of "make-parameters:" or
    # "build-environment:". This way we get the version number of our
    # Snap (which is extracted from the foomatic-db upstream source)
    # into the ps-printer-app executable.
    override-build: |
      set -eux
      make clean
      VERSION="`craftctl get version`"
      make -j"8" LDFLAGS="$LDFLAGS -ljpeg" VERSION="$VERSION"
      make -j"8" install LDFLAGS="$LDFLAGS -ljpeg" VERSION="$VERSION" DESTDIR="$CRAFT_PART_INSTALL"
      #craftctl default
    build-packages:
      - libusb-1.0-0-dev
    stage-packages:
      - libusb-1.0-0
      - libjbig0
      - liblcms2-2
      - libtiff5
      - libwebp7
    stage:
      - -usr/lib/ps-printer-app
    prime:
      - usr/bin/ps-printer-app
      - lib/*/lib*.so*
      - usr/lib/*/lib*.so*
      - usr/share/ps-printer-app
      - usr/share/ppd
      - -var
      - -usr/share/man
    after: [pappl-retrofit, pappl, libcupsfilters, libppd, cups-filters, foomatic-db, hplip]

  scripts:
    plugin: dump
    source: snap/local/
    organize:
      run-ps-printer-app*: scripts/
    prime:
      - scripts/
    after: [ps-printer-app]
